// components/TabbedGPTModal/index.js
import React, { useState } from 'react';
import styled from 'styled-components';
import {
  Modal,
  Tabs,
  Button,
  TextInput,
  Typography,
  Box,
} from '@strapi/design-system';

import PluginIcon from "../PluginIcon"
import Response from "../Home/response"

import instance from '../../utils/axiosInstance';

const GPTModal = () => {
  // State for Completion Tab
  const [prompt, setPrompt] = useState('');
  const [completionResponse, setCompletionResponse] = useState('');
  const [completionLoading, setCompletionLoading] = useState(false);
  const [completionError, setCompletionError] = useState(null);
  const [conversation, setConservation] = useState()

  // State for Image Tab
  const [imagePrompt, setImagePrompt] = useState('');
  const [imageResponse, setImageResponse] = useState('');
  const [imageLoading, setImageLoading] = useState(false);
  const [imageError, setImageError] = useState(null);

  // Handler for Generating Text Completion
  const handleGenerateCompletion = async () => {
    if (!prompt.trim()) {
      setCompletionError('Prompt cannot be empty.');
      return;
    }
    setCompletionLoading(true);
    setCompletionError(null);
    try {
      // Replace with your GPT API call for text completion
      const res = await instance.post('/api/generate-completion', {
        body: JSON.stringify({ prompt }),
      });
      const data = await res.json();
      setCompletionResponse(data.result);
    } catch (err) {
      setCompletionError('Failed to generate completion. Please try again.');
    } finally {
      setCompletionLoading(false);
    }
  };

  // Handler for Generating Image
  const handleGenerateImage = async () => {
    if (!imagePrompt.trim()) {
      setImageError('Prompt cannot be empty.');
      return;
    }
    setImageLoading(true);
    setImageError(null);
    try {
      // Replace with your GPT API call for image generation
      const res = await instance.post('/api/generate-image', {
        body: JSON.stringify({ prompt: imagePrompt }),
      });
      const data = await res.json();
      setImageResponse(data.imageUrl); // Assuming the API returns an image URL
    } catch (err) {
      setImageError('Failed to generate image. Please try again.');
    } finally {
      setImageLoading(false);
    }
  };

  return (
    <Modal.Root>
      <Modal.Trigger>
        <StyledButton startIcon={<PluginIcon />}>GPT</StyledButton>
      </Modal.Trigger>
      <Modal.Content>
        <Modal.Header>
          <Typography variant="delta" id="gpt-tabbed-modal-title">
            Strapi SuperGPT
          </Typography>
        </Modal.Header>
        <Modal.Body>
          <Tabs.Root label="GPT Options">
            <Tabs.List>
              <Tabs.Trigger value="completion">Text Completion</Tabs.Trigger>
              <Tabs.Trigger value="image">Image Generation</Tabs.Trigger>
            </Tabs.List>
            <Tabs.Content value="completion">
              <Box padding={4}>
                <TextInput
                  label="Your Prompt"
                  placeholder="Enter your prompt here..."
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                  error={completionError}
                />
                <Button
                  variant="secondary"
                  onClick={handleGenerateCompletion}
                  disabled={completionLoading}
                  style={{ marginTop: '16px' }}
                >
                  {completionLoading ? 'Generating...' : 'Generate Completion'}
                </Button>
                {completionResponse && (
                  <Typography mt={2} style={{ whiteSpace: 'pre-wrap' }}>
                    {completionResponse}
                  </Typography>
                )}
                {completionError && (
                  <Typography color="danger" mt={2}>
                    {completionError}
                  </Typography>
                )}
              </Box>
              <Response>
                {conversation}
              </Response>
            </Tabs.Content>
            <Tabs.Content value="image">
              <Box padding={4}>
                <TextInput
                  label="Image Prompt"
                  placeholder="Describe the image you want..."
                  value={imagePrompt}
                  onChange={(e) => setImagePrompt(e.target.value)}
                  error={imageError}
                />
                <Button
                  variant="secondary"
                  onClick={handleGenerateImage}
                  disabled={imageLoading}
                  style={{ marginTop: '16px' }}
                >
                  {imageLoading ? 'Generating...' : 'Generate Image'}
                </Button>
                {imageResponse && (
                  <Box mt={2}>
                    <img src={imageResponse} alt="Generated by GPT" style={{ maxWidth: '100%' }} />
                  </Box>
                )}
                {imageError && (
                  <Typography color="danger" mt={2}>
                    {imageError}
                  </Typography>
                )}
              </Box>
            </Tabs.Content>
          </Tabs.Root>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="tertiary">
            Cancel
          </Button>
        </Modal.Footer>
      </Modal.Content>
    </Modal.Root>
  );
};

export default GPTModal;

const StyledButton = styled(Button)`
  width: 100%;
`